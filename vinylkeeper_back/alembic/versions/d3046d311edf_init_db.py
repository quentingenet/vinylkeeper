"""init DB

Revision ID: d3046d311edf
Revises: 
Create Date: 2025-06-24 10:43:03.131138+02:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd3046d311edf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entity_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('external_sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('moderation_statuses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('moods',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('place_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('vinyl_states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vinyl_states_id'), 'vinyl_states', ['id'], unique=False)
    op.create_index(op.f('ix_vinyl_states_name'), 'vinyl_states', ['name'], unique=True)
    op.create_table('albums',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_album_id', sa.String(length=255), nullable=False, comment='External Album ID as string'),
    sa.Column('title', sa.String(length=512), nullable=True, comment='Cached title of the album'),
    sa.Column('external_source_id', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.String(length=1024), nullable=True, comment='Cached album cover'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['external_source_id'], ['external_sources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('external_album_id', 'external_source_id', name='uq_external_album_id_source')
    )
    op.create_index(op.f('ix_albums_external_album_id'), 'albums', ['external_album_id'], unique=False)
    op.create_index(op.f('ix_albums_id'), 'albums', ['id'], unique=False)
    op.create_table('artists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_artist_id', sa.String(length=255), nullable=False, comment='External Artist ID as string'),
    sa.Column('title', sa.String(length=512), nullable=True, comment='Name of the artist'),
    sa.Column('image_url', sa.String(length=1024), nullable=True, comment='Artist image URL'),
    sa.Column('external_source_id', sa.Integer(), nullable=False, comment='Reference to external source (e.g. MusicBrainz)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['external_source_id'], ['external_sources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('external_artist_id', 'external_source_id', name='uq_external_artist_id_source')
    )
    op.create_index(op.f('ix_artists_external_artist_id'), 'artists', ['external_artist_id'], unique=False)
    op.create_index(op.f('ix_artists_id'), 'artists', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=1024), nullable=False),
    sa.Column('is_accepted_terms', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('timezone', sa.String(length=100), server_default='Europe/Paris', nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('user_uuid', sa.UUID(), nullable=False),
    sa.Column('number_of_connections', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_uuid')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('collections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('mood_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('length(name) >= 1', name='check_collection_name_length'),
    sa.ForeignKeyConstraint(['mood_id'], ['moods.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_collections_id'), 'collections', ['id'], unique=False)
    op.create_index(op.f('ix_collections_name'), 'collections', ['name'], unique=False)
    op.create_index(op.f('ix_collections_owner_id'), 'collections', ['owner_id'], unique=False)
    op.create_table('loans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('album_id', sa.Integer(), nullable=False),
    sa.Column('loaned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('returned_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_returned', sa.Boolean(), nullable=False),
    sa.Column('comment', sa.String(length=255), nullable=True),
    sa.Column('borrower_name', sa.String(length=255), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('(end_date IS NULL OR start_date <= end_date)', name='check_start_before_end'),
    sa.CheckConstraint('length(comment) <= 255', name='check_comment_length'),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_loans_album_id'), 'loans', ['album_id'], unique=False)
    op.create_index(op.f('ix_loans_borrower_name'), 'loans', ['borrower_name'], unique=False)
    op.create_index(op.f('ix_loans_id'), 'loans', ['id'], unique=False)
    op.create_index(op.f('ix_loans_user_id'), 'loans', ['user_id'], unique=False)
    op.create_table('places',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('place_type_id', sa.Integer(), nullable=False),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('is_moderated', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('latitude >= -90 AND latitude <= 90', name='check_latitude_range'),
    sa.CheckConstraint('length(name) >= 1', name='check_place_name_length'),
    sa.CheckConstraint('longitude >= -180 AND longitude <= 180', name='check_longitude_range'),
    sa.ForeignKeyConstraint(['place_type_id'], ['place_types.id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_places_city'), 'places', ['city'], unique=False)
    op.create_index(op.f('ix_places_country'), 'places', ['country'], unique=False)
    op.create_index(op.f('ix_places_id'), 'places', ['id'], unique=False)
    op.create_index(op.f('ix_places_name'), 'places', ['name'], unique=False)
    op.create_index(op.f('ix_places_submitted_by_id'), 'places', ['submitted_by_id'], unique=False)
    op.create_table('wishlist',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.String(length=255), nullable=False),
    sa.Column('entity_type_id', sa.Integer(), nullable=False),
    sa.Column('external_source_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=512), nullable=True),
    sa.Column('image_url', sa.String(length=1024), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['entity_type_id'], ['entity_types.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['external_source_id'], ['external_sources.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'external_id', 'entity_type_id', 'external_source_id', name='uq_wishlist_user_entity_source')
    )
    op.create_index(op.f('ix_wishlist_id'), 'wishlist', ['id'], unique=False)
    op.create_table('collection_album',
    sa.Column('collection_id', sa.Integer(), nullable=False),
    sa.Column('album_id', sa.Integer(), nullable=False),
    sa.Column('state_record', sa.Integer(), nullable=True),
    sa.Column('state_cover', sa.Integer(), nullable=True),
    sa.Column('acquisition_month_year', sa.String(length=7), nullable=True, comment='Format: YYYY-MM'),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['state_cover'], ['vinyl_states.id'], ),
    sa.ForeignKeyConstraint(['state_record'], ['vinyl_states.id'], ),
    sa.PrimaryKeyConstraint('collection_id', 'album_id'),
    sa.UniqueConstraint('collection_id', 'album_id', name='uq_collection_album')
    )
    op.create_table('collection_artist',
    sa.Column('collection_id', sa.Integer(), nullable=False),
    sa.Column('artist_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('collection_id', 'artist_id')
    )
    op.create_table('likes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('collection_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'collection_id', name='uq_user_collection_like')
    )
    op.create_index(op.f('ix_likes_collection_id'), 'likes', ['collection_id'], unique=False)
    op.create_index(op.f('ix_likes_id'), 'likes', ['id'], unique=False)
    op.create_index(op.f('ix_likes_user_id'), 'likes', ['user_id'], unique=False)
    op.create_table('moderation_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('place_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['place_id'], ['places.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['moderation_statuses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_moderation_requests_id'), 'moderation_requests', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_moderation_requests_id'), table_name='moderation_requests')
    op.drop_table('moderation_requests')
    op.drop_index(op.f('ix_likes_user_id'), table_name='likes')
    op.drop_index(op.f('ix_likes_id'), table_name='likes')
    op.drop_index(op.f('ix_likes_collection_id'), table_name='likes')
    op.drop_table('likes')
    op.drop_table('collection_artist')
    op.drop_table('collection_album')
    op.drop_index(op.f('ix_wishlist_id'), table_name='wishlist')
    op.drop_table('wishlist')
    op.drop_index(op.f('ix_places_submitted_by_id'), table_name='places')
    op.drop_index(op.f('ix_places_name'), table_name='places')
    op.drop_index(op.f('ix_places_id'), table_name='places')
    op.drop_index(op.f('ix_places_country'), table_name='places')
    op.drop_index(op.f('ix_places_city'), table_name='places')
    op.drop_table('places')
    op.drop_index(op.f('ix_loans_user_id'), table_name='loans')
    op.drop_index(op.f('ix_loans_id'), table_name='loans')
    op.drop_index(op.f('ix_loans_borrower_name'), table_name='loans')
    op.drop_index(op.f('ix_loans_album_id'), table_name='loans')
    op.drop_table('loans')
    op.drop_index(op.f('ix_collections_owner_id'), table_name='collections')
    op.drop_index(op.f('ix_collections_name'), table_name='collections')
    op.drop_index(op.f('ix_collections_id'), table_name='collections')
    op.drop_table('collections')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_artists_id'), table_name='artists')
    op.drop_index(op.f('ix_artists_external_artist_id'), table_name='artists')
    op.drop_table('artists')
    op.drop_index(op.f('ix_albums_id'), table_name='albums')
    op.drop_index(op.f('ix_albums_external_album_id'), table_name='albums')
    op.drop_table('albums')
    op.drop_index(op.f('ix_vinyl_states_name'), table_name='vinyl_states')
    op.drop_index(op.f('ix_vinyl_states_id'), table_name='vinyl_states')
    op.drop_table('vinyl_states')
    op.drop_table('roles')
    op.drop_table('place_types')
    op.drop_table('moods')
    op.drop_table('moderation_statuses')
    op.drop_table('external_sources')
    op.drop_table('entity_types')
    # ### end Alembic commands ###
